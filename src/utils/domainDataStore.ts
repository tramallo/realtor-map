import { create } from "zustand";

import { CreateProperty, Property, UpdateProperty } from "./domainSchemas";
import { testProperties } from "./testData";

interface PropertyStore {
    properties: Property[],
    createProperty: (newPropertyData: CreateProperty) => Error | void,
    removeProperty: (propertyId: Property['id']) => Error | void,
    updateProperty: (propertyId: Property['id'], updatedProperty: UpdateProperty) => Error | void
}

export const usePropertyStore = create<PropertyStore>((set) => ({
    properties: testProperties,
    createProperty: (newPropertyData) => set((prevState) => {
        // this data is generated by the db
        const newId: string = new Date().getTime().toString();
        const newProperty: Property = {
            id: newId,
            ...newPropertyData
        }

        return { properties: [...prevState.properties, newProperty] }
    }),
    removeProperty: (propertyId) => set((prevState) => ({
        properties: prevState.properties.filter((property) => property.id != propertyId)
    })),
    updateProperty: (propertyId, updatedProperty) => set((prevState) => ({
        properties: prevState.properties.map((property) => property.id == propertyId ? { ...property, ...updatedProperty } : property)
    })),
}))
