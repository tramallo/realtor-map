/** This file exposes stores that manages the data of the system
 * 
 * It has methods to perform CRUD operations & local copies of the info for quick access
 */
import { create } from "zustand";

import { CreatePersonData, CreatePropertyData, CreateRealtorData, PersonData, PropertyData, RealtorData, UpdatePropertyData } from "./domainSchemas";
import { testPersons, testProperties, testRealtors } from "./testData";

/** Describes the response returned by the operations on the store
 * 
 * Errors are not thrown, they are returned to be handled by consumer
 */
interface DataResponse<T> {
    data: T;
    error?: undefined;
}
interface ErrorResponse {
    data?: undefined;
    error: Error
}
type StoreResponse<T> = DataResponse<T> | ErrorResponse

/** Describes a store for properties
 */
interface PropertyStore {
    properties: PropertyData[],
    createProperty: (newPropertyData: CreatePropertyData) => Promise<StoreResponse<PropertyData['id']>>,
    removeProperty: (propertyId: PropertyData['id']) => Promise<StoreResponse<undefined>>,
    updateProperty: (propertyId: PropertyData['id'], updatedProperty: UpdatePropertyData) => Promise<StoreResponse<undefined>>
}

export const usePropertyStore = create<PropertyStore>((set) => ({
    properties: testProperties,
    createProperty: async (newPropertyData) => {
        // this data is generated by the db
        const newId: string = new Date().getTime().toString();
        const newProperty: PropertyData = {
            id: newId,
            ...newPropertyData
        }

        set((prevState) => ({ properties: [...prevState.properties, newProperty] }))
        return { data: newProperty.id };
    },
    removeProperty: async (propertyId) => {
        set((prevState) => ({ properties: prevState.properties.filter((property) => property.id != propertyId) }))

        return { data: undefined }
    },
    updateProperty: async (propertyId, updatedProperty) => {
        set((prevState) => ({ properties: prevState.properties.map((property) => property.id == propertyId ? { ...property, ...updatedProperty } : property) }))
    
        return { data: undefined }
    },
}))

/** Describes a store for persons
 */
interface PersonStore {
    persons: PersonData[],
    createPerson: (newPersonData: CreatePersonData) => Promise<StoreResponse<PersonData['id']>>
}

export const usePersonStore = create<PersonStore>((set) => ({
    persons: testPersons,
    createPerson: async (newPersonData) => {
        //this data is generated by the db
        const newId: string = new Date().getTime().toString();
        const newPerson: PersonData = {
            id: newId,
            ...newPersonData
        }

        set((prevState) => ({ persons: [...prevState.persons, newPerson]}))
        return { data: newPerson.id }
    }
}))

/** Describes a store for realtors
 */
interface RealtorStore {
    realtors: RealtorData[],
    createRealtor: (newRealtorData: CreateRealtorData) => Promise<StoreResponse<RealtorData['id']>>
}

export const useRealtorStore = create<RealtorStore>((set) => ({
    realtors: testRealtors,
    createRealtor: async (newRealtorData) => {
        //this data is generate by the db
        const newId: string = new Date().getTime().toString();
        const newRealtor: RealtorData = {
            id: newId,
            ...newRealtorData
        }

        set((prevState) => ({ realtors: [...prevState.realtors, newRealtor] }))
        return { data: newRealtor.id }
    }
}))